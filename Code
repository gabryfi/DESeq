

### AUTO-> QC, DESeq, PCA, VolcanoPlot 

#!/bin/bash

# ======== PARAMETRI DA MODIFICARE =================
FASTQ_DIR="/data/pacap_3/no_sample_id/20250519_1114_P2I-00111-A_PAY70806_608693f3/fastq_pass"
CONTROL_LABEL="veh"
TREATMENT_LABEL="pacap"
CONTROL_BARCODES="01 02 03 04 05"
TREATMENT_BARCODES="06 07 08 09 10"
BATCH_NAME="Batch1" 
THREADS=18
R_DIR="/data/ref/deseq_auto_import.R"   # Path assoluto dove hai salvato lo script R
REF="/path/to/ref/Homo_sapiens.GRCh38.dna.primary_assembly.fa"
GTF="/data/ref/Homo_sapiens.GRCh38.113.gtf"
# ==================================================


# ======== PARAMETRI DA NON MODIFICARE =============

# set output 2 livelli sopra a FASTQ_DIR
WORK_DIR="$(dirname "$(dirname "$FASTQ_DIR")")"
cd "$WORK_DIR" || { echo "Errore: non trovo $WORK_DIR"; exit 1; } # Se stampa "Errore", non trova il path 2 cartelle sopra a FASTQ_DIR
echo "Salvataggio output in: $WORK_DIR"

#############################
########### QC #############
#############################

# --- Controlli ---
for barcode in $CONTROL_BARCODES; do
    echo "Processing $barcode:"
    zcat "$FASTQ_DIR/barcode${barcode}"/*.fastq.gz > ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_combined.fastq

    echo "QC for $barcode:"
    NanoPlot -t "$THREADS" --fastq ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_combined.fastq \
        --outdir Nanoplot_${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL} --plots hex

    echo "Trimming $barcode:"
    fastcat --min_length 500 --min_qscore 10 ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_combined.fastq \
        > ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_filtered.fastq
done

# --- Trattati ---
for barcode in $TREATMENT_BARCODES; do
    echo "Processing $barcode:"
    zcat "$FASTQ_DIR/barcode${barcode}"/*.fastq.gz > ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_combined.fastq

    echo "QC for $barcode:"
    NanoPlot -t "$THREADS" --fastq ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_combined.fastq \
        --outdir Nanoplot_${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL} --plots hex

    echo "Trimming $barcode:"
    fastcat --min_length 500 --min_qscore 10 ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_combined.fastq \
        > ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_filtered.fastq
done

#############################
###### PYCHOPPER ###########
#############################

echo "Starting Pychopper processing..."

# Controlli
for barcode in $CONTROL_BARCODES; do
    echo "Pychopping barcode $barcode ($CONTROL_LABEL)..."
    pychopper -t "$THREADS" \
        -r ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_pychopper_report.txt \
        -u ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_unclassified.fastq \
        ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_filtered.fastq \
        ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_full_length.fastq
done

# Trattati
for barcode in $TREATMENT_BARCODES; do
    echo "Pychopping barcode $barcode ($TREATMENT_LABEL)..."
    pychopper -t "$THREADS" \
        -r ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_pychopper_report.txt \
        -u ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_unclassified.fastq \
        ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_filtered.fastq \
        ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_full_length.fastq
done

#############################
###### ALIGNMENT ###########
#############################

echo "Starting alignment with reference $REF..."

# Controlli
for barcode in $CONTROL_BARCODES; do
    echo "Aligning barcode $barcode ($CONTROL_LABEL)..."
    minimap2 -t "$THREADS" -a -x splice "$REF" \
        ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_full_length.fastq > ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_aln.sam
done

# Trattati
for barcode in $TREATMENT_BARCODES; do
    echo "Aligning barcode $barcode ($TREATMENT_LABEL)..."
    minimap2 -t "$THREADS" -a -x splice "$REF" \
        ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_full_length.fastq > ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_aln.sam
done

#############################
###### SAMTOOLS BAM ########
#############################

echo "Starting SAM to BAM conversion and sorting..."

# Controlli
for barcode in $CONTROL_BARCODES; do
    echo "Processing SAM → BAM for barcode $barcode ($CONTROL_LABEL)..."
    samtools view -S -b ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_aln.sam > ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}.bam
    samtools sort --threads "$THREADS" -o ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_sorted.bam ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}.bam
    rm ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_aln.sam
done

# Trattati
for barcode in $TREATMENT_BARCODES; do
    echo "Processing SAM → BAM for barcode $barcode ($TREATMENT_LABEL)..."
    samtools view -S -b ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_aln.sam > ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}.bam
    samtools sort --threads "$THREADS" -o ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_sorted.bam ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}.bam
    rm ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_aln.sam
done

#############################
###### QUANTIFICATION ######
#############################

echo "Starting quantification with featureCounts..."

# Controlli
for barcode in $CONTROL_BARCODES; do
    echo "Quantifying barcode $barcode ($CONTROL_LABEL)..."
    samtools index ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_sorted.bam
    featureCounts -L -T "$THREADS" --maxMOp 100 \
        -a "$GTF" -o ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_counts.txt \
        -t exon -g gene_id -B ${BATCH_NAME}_barcode_${barcode}_${CONTROL_LABEL}_sorted.bam
done

# Trattati
for barcode in $TREATMENT_BARCODES; do
    echo "Quantifying barcode $barcode ($TREATMENT_LABEL)..."
    samtools index ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_sorted.bam
    featureCounts -L -T "$THREADS" --maxMOp 100 \
        -a "$GTF" -o ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_counts.txt \
        -t exon -g gene_id -B ${BATCH_NAME}_barcode_${barcode}_${TREATMENT_LABEL}_sorted.bam
done


#-----------------------------------------------------------------------------------------------------------------------------------------------------------#
#-----------------------------------------------------------------------------------------------------------------------------------------------------------#
#-----------------------------------------------------------------------------------------------------------------------------------------------------------#

#############################
########### DESeq ###########
#############################


echo "Lancio analisi DESeq2 su tutti i counts in: $WORK_DIR"
Rscript "$R_DIR/deseq_auto_import.R" "$WORK_DIR"


cat("Analisi completata. File salvati in:\n")
cat(" - deseq_results.csv\n")
cat(" - samples_metadata.csv\n")
cat(" - PCA_plot.png\n")
cat(" - Heatmap_top30.png\n")
cat(" - Volcano_plot.png\n")



-------------------------------------------------------------------------------------
# deseq_auto_import.R:

#!/usr/bin/env Rscript

suppressMessages({
  library(DESeq2)
  library(stringr)
  library(tools)
  library(pheatmap)
  library(ggplot2)
  library(RColorBrewer)
})

# === PARAMETRO UNICO ===
args <- commandArgs(trailingOnly = TRUE)

if (length(args) != 1) {
  stop("Uso: Rscript deseq_auto_import.R /percorso/a/WORK_DIR")
}
work_dir <- args[1]

# === Trova tutti i file *_counts.txt ===
count_files <- list.files(work_dir, pattern = "_counts\\.txt$", full.names = TRUE)
if (length(count_files) == 0) stop("Nessun file *_counts.txt trovato nel path.")

# === Estrai metadati da filename ===
extract_metadata <- function(filename) {
  base <- basename(filename)
  name <- file_path_sans_ext(base)
  parts <- str_split(name, "_")[[1]]
  batch <- parts[1]
  barcode <- parts[3]
  condition <- parts[4]
  sample <- paste(batch, "bc", barcode, condition, sep = "_")
  return(data.frame(sample = sample, batch = batch, condition = condition, file = filename))
}

sample_table <- do.call(rbind, lapply(count_files, extract_metadata))

# === Leggi i dati di conteggio ===
read_featureCounts <- function(file_path) {
  df <- read.table(file_path, header = TRUE, skip = 1, row.names = 1)
  df <- df[, ncol(df), drop = FALSE]
  colnames(df) <- file_path_sans_ext(basename(file_path))
  return(df)
}

count_list <- lapply(sample_table$file, read_featureCounts)
count_matrix <- do.call(cbind, count_list)

# Ordina sample_table come count_matrix
sample_table$raw_sample <- file_path_sans_ext(basename(sample_table$file))
sample_table <- sample_table[match(colnames(count_matrix), sample_table$raw_sample), ]

# DESeq2
dds <- DESeqDataSetFromMatrix(
  countData = round(count_matrix),
  colData = sample_table[, c("sample", "batch", "condition")],
  design = ~ batch + condition
)

dds <- DESeq(dds)
res <- results(dds, contrast = c("condition", "pacap", "veh"))
write.csv(as.data.frame(res), file = file.path(work_dir, "deseq_results.csv"))
write.csv(sample_table, file = file.path(work_dir, "samples_metadata.csv"), row.names = FALSE)

# === PCA plot ===
rld <- rlog(dds, blind = FALSE)
pcaData <- plotPCA(rld, intgroup = "condition", returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
p <- ggplot(pcaData, aes(PC1, PC2, color = condition)) +
  geom_point(size = 4) +
  xlab(paste0("PC1: ", percentVar[1], "%")) +
  ylab(paste0("PC2: ", percentVar[2], "%")) +
  theme_minimal() +
  ggtitle("PCA Plot")
ggsave(filename = file.path(work_dir, "PCA_plot.png"), plot = p, width = 6, height = 5)

# === Heatmap ===
top_genes <- head(order(rowVars(assay(rld)), decreasing = TRUE), 30)
mat <- assay(rld)[top_genes, ]
mat <- mat - rowMeans(mat)
anno <- as.data.frame(colData(rld)[, c("condition", "batch")])
pheatmap(mat, annotation_col = anno,
         fontsize_row = 8, cluster_cols = TRUE,
         filename = file.path(work_dir, "Heatmap_top30.png"))

# === Volcano Plot ===
res_df <- as.data.frame(res)
res_df$gene <- rownames(res_df)
res_df$threshold <- as.factor(res_df$padj < 0.05 & abs(res_df$log2FoldChange) > 1)

volcano <- ggplot(res_df, aes(log2FoldChange, -log10(padj), color = threshold)) +
  geom_point(alpha = 0.6) +
  scale_color_manual(values = c("FALSE" = "grey", "TRUE" = "red")) +
  theme_minimal() +
  xlab("log2 Fold Change") +
  ylab("-log10 adjusted p-value") +
  ggtitle("Volcano Plot") +
  theme(legend.position = "none")
ggsave(file.path(work_dir, "Volcano_plot.png"), plot = volcano, width = 6, height = 5)







